const map = new mapboxgl.Map({
  container: "map",
  style: "mapbox://styles/mapbox/streets-v11",
  center: [103.824, 1.2649],
  zoom: 19,
});

map.on("load", () => {
  map.addSource("data", {
    type: "geojson",
    data: window.geojsonData, // JSON data load from iframe, generated by geojson.io
  });

  let _popup = null;
  let _hoverName = null;

  const renderPopup = (event, name) => {
    if (_popup) {
      _popup.remove();
    }

    _popup = new mapboxgl.Popup({
      closeButton: false,
    })
      .setLngLat(event.lngLat.toArray())
      .setHTML(`<div>${name}</div>`)
      .addTo(map);
  };

  map
    .addLayer({
      id: "way-layer",
      type: "line",
      source: "data",
      filter: ["==", "$type", "LineString"],
      paint: {
        "line-color": "blue",
        "line-opacity": 0.5,
        "line-width": 50,
      },
    })
    .on("mouseenter", "way-layer", (event) => {
      console.log(
        "mouseenter way",
        _hoverName,
        event.features.map(({ properties: p }) => p.name)
      );
    })
    .on("mouseleave", "way-layer", (event) => {
      console.log("mouseleave way", _hoverName);
    });

  map
    .addLayer({
      id: "node-layer",
      type: "circle",
      source: "data",
      filter: ["==", "$type", "Point"],
      paint: {
        "circle-color": "red",
        "circle-opacity": 0.5,
        "circle-radius": 50,
      },
    })
    .on("mouseenter", "node-layer", (event) => {
      console.log(
        "mouseenter node",
        _hoverName,
        event.features.map(({ properties: p }) => p.name)
      );
    })
    .on("mouseleave", "node-layer", (event) => {
      console.log("mouseleave node", _hoverName);
    });

  map.on("mousemove", (event) => {
    const _lastHoverName = _hoverName;
    // query all features in these 2 layers and under mouse cursor
    const features = map.queryRenderedFeatures(event.point, {
      layers: ["way-layer", "node-layer"],
    });
    console.log(
      "mousemove-start",
      features.map(({ properties }) => properties.name),
      _lastHoverName
    );

    if (features.length === 0) {
      _hoverName = null;
    } else {
      // node is above all layer, so when there is a node feature, show it
      const nodeFeature = features.find(({ properties: p }) =>
        p.name.startsWith("node/")
      );
      if (nodeFeature) {
        _hoverName = nodeFeature.properties.name;
      } else {
        _hoverName = features[0].properties.name;
      }
    }

    if (_lastHoverName !== _hoverName) {
      console.log("_hoverName changed", _lastHoverName, _hoverName);
      if (_hoverName !== null) {
        renderPopup(event, _hoverName);
      }
    }

    console.log(
      "mousemove-end",
      features.map(({ properties }) => properties.name),
      _hoverName
    );
  });
});
